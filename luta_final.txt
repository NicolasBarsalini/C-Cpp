#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//definir os nomes das lutas como: JiuJitsu, Boxe e MMA, ao sistema perguntar***
typedef struct aluno{
	char cpf[13];
	char nome[80];
	int numaula;
}aluno;

typedef struct luta{
	int regaula; 
	int qaluno;
	char modalidade[20];
	int grau;
	float valor;
}luta;

void alocaluta(luta **l, int tam);
void cadastraluta(luta *l, int tam);
void alocaaluno(aluno **a, int tam);
void cadastraaluno(aluno *a, luta *l);
void encerramat(aluno *a, luta *l, int tam);

int main()
{
	luta *pl=NULL;
	aluno *pa=NULL;
	int op, cont=0;
	alocaluta(&pl, 3);
	cadastraluta(pl, 3);
	
	do{
		system("CLS");
		printf("Digite a opcao desejada:\n[1]Matricula\n[2]Encerrar Matricula\n[3]Fim\nOpcao: ");
		scanf("%i", &op);
		fflush(stdin);
		switch(op)
		{
			case 1:
				alocaaluno(&pa, cont+1);
				cadastraaluno(pa+cont, pl);
				cont++;
				break;
			case 2:
				encerramat(pa, pl, cont);
				printf("\n\nMatricula Encerrada com sucesso!\n");
						system("PAUSE");
				break;
				
		}
	}while(op!=3);
return 0;
}

void alocaluta(luta **l, int tam)
{
	if((*l=(luta*)realloc(*l, tam*sizeof(luta)))==NULL)
		exit(1);
}

void cadastraluta(luta *l, int tam)
{
	int i;
	for(i=0; i<3; i++, l++)
	{
	if(i<1)
	{
		printf("Digite o nome da luta 1:\n");
		gets(l->modalidade);
		l->grau=1;
		l->regaula=1;
		l->qaluno=0;
		l->valor=50;
	{
	if(i<2)
	{
		printf("Digite o nome da luta 2:\n");
		gets(l->modalidade);
		l->grau=2;
		l->regaula=2;
		l->qaluno=0;
		l->valor=75;
	}
	if(i<3)
	{
		printf("Digite o nome da luta 3:\n");
		gets(l->modalidade);
		l->grau=3;
		l->regaula=3;
		l->qaluno=0;
		l->valor=75;
	}
}}}}

void alocaaluno(aluno **a, int tam)
{
	if((*a=(aluno*)realloc(*a, tam*sizeof(aluno)))==NULL)
		exit(1);
}

void cadastraaluno(aluno *a, luta *l)
{
	int op;
	printf("\nDigite a luta desejada:\n[1]JiuJitsu\n[2]BOXE\n[3]MMA\n");
	scanf("%i", &op);
	fflush(stdin);
	switch(op)
	{
		case 1:
			printf("\nDigite seu nome: ");
			gets(a->nome);
			fflush(stdin);
			printf("\nCPF(SOMENTE NUMEROS): ");
			gets(a->cpf);
			fflush(stdin);
			a->numaula=1;
			(l+0)->qaluno++;
			printf("\nMatricula realizada com sucesso!\nCPF: %s, Nome: %s, Luta: JiuJitsu, Qtde de Alunos: %i\nRegistro da aula: %i\nMensalidade: %.2f\n", a->cpf, a->nome, (l+0)->qaluno, (l+0)->regaula, (l+0)->valor);
			system("PAUSE");
			break;
		case 2:
			printf("\nDigite seu nome: ");
			gets(a->nome);
			fflush(stdin);
			printf("\nCPF(SOMENTE NUMEROS): ");
			gets(a->cpf);
			fflush(stdin);
			a->numaula=2;
			(l+1)->qaluno++;
			printf("Matricula realizada com sucesso!\nCPF: %s, Nome: %s, Luta: BOXE, Qtde de Alunos: %i\nRegistro da aula: %i\nMensalidade: %.2f\n", a->cpf, a->nome, (l+1)->qaluno, (l+1)->regaula, (l+1)->valor);
			system("PAUSE");
			break;
		case 3:
			printf("\nDigite seu nome: ");
			gets(a->nome);
			fflush(stdin);
			printf("\nCPF(SOMENTE NUMEROS): ");
			gets(a->cpf);
			fflush(stdin);
			a->numaula=1;
			(l+2)->qaluno+1;
			printf("Matricula realizada com sucesso!\nCPF: %s, Nome: %s, Luta: JiuJitsu, Qtde de Alunos: %i\nRegistro da aula: %i\nMensalidade: %.2f\n", a->cpf, a->nome, (l+2)->qaluno, (l+2)->regaula, (l+2)->valor);
			system("PAUSE");
			break;
	}
}

void encerramat(aluno *a, luta *l, int tam)
{
	char cpf[13]; 
	int i;
	printf("Informe o cpf: ");
	gets(cpf);
	fflush(stdin);
	for(i=0; i<tam; i++, a++)
	{
		if(strcmp(a->cpf, cpf)==0)
		{
			printf("\nNome: %s", a->nome);
			printf("\nNum da aula: %i", a->numaula);
			if(a->numaula==1)
			{
			printf("\nModalide: JiuJitsu\n");
			printf("\nGrau: 1(Iniciante\n");
			(l+0)->qaluno--;
			}
			if(a->numaula==2)
				{
				printf("\nModalide: Boxe\n");
				printf("\nGrau: 2(Intermediario)\n");
				(l+1)->qaluno--;
				}
			if(a->numaula==3)
				{
				printf("\nModalide: Boxe\n");
				printf("\nGrau: 3(Avancado)\n");
				(l+2)->qaluno--;
				}
			
		}
		else
			printf("\nMatricula nao encontrada\n");
	}
}
